// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    //to use pgvector plugin
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}

model User{
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    firstName String?
    lastName String?
    imageUrl String?

    emailAddress String @unique

    //one credit is one file being proccessed.
    //Default user can process 150 files.
    credits Int @default(150)

    UserToProjects UserToProject[]

    questionsAsked Question[]
}

//storing project details
model Project{
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    projectName String
    repoUrl     String
    githubToken String?

    deletedAt   DateTime?

    UserToProjects UserToProject[]

    commits Commit[]

    SourceCodeEmbeddings SourceCodeEmbedding[]

    savedQuestions Question[]
}

//many-many relationship. 1 User can have many Projects. 1 Project can have many Users
model UserToProject{
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    userId String
    projectId String

    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])

    //compound key. Pair of 1 userId and 1 projectId
    @@unique([userId, projectId])
}

// storing the Ai sumaary for each document -> create embedding of each ai sumaary and storing this within the DB
model SourceCodeEmbedding{
    id          String   @id @default(cuid())

    //Using an embedding of 768 Dimension vector since this is the model used by Gemini
    summaryEmbedding Unsupported("vector(768)")?
    //source code
    sourceCode String
    fileName   String
    //ai summary
    summary String

    //for 1 project
    projectId   String
    project     Project @relation(fields: [projectId], references: [id])
}

model Commit{
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    projectId   String
    project     Project @relation(fields: [projectId], references: [id])

    commitHash        String @unique
    commitMessage     String
    commitAuthorName  String
    commitAuthorAvatar String
    commitDate        DateTime

    //ai summary
    summary String
}


// To save the question asked
model Question{
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    question String
    answer String

    filesReferenced Json?

    projectId   String
    project     Project @relation(fields: [projectId], references: [id])

    userId String
    user User @relation(fields: [userId], references: [id])
}